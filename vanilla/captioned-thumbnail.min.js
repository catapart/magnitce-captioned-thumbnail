var d=`

:host
{
    display: inline-flex;
    width: 80px;
    height: 80px;
    color-scheme: light dark;
}

:host(:focus) figure
{
    border-color: rgb(205 205 205);
}
@media (prefers-color-scheme: dark) 
{
    :host(:focus) figure
    {
        border-color: rgb(81 81 81);
    }
}

figure
{
    flex: 1;
    display: grid;
    grid-template-rows: 1fr auto;
    margin: 0;
    padding: 0;
    border: solid 1px transparent;
}
:host(.selected) figure
{
    border-color: inherit;
}

#selected
,::slotted([slot="selected"])
{
    grid-column: 1;
    grid-row: 1;

    justify-self: flex-start;
    align-self: flex-start;
    z-index: 2;

    opacity: 0;
    transition: opacity 200ms ease;
}

:host(:not([select],[selectable])) #selected
,:host(:not([select],[selectable])) ::slotted([slot="selected"])
{
    display: none;
    pointer-events: none;
}

#edit-button
,::slotted([slot="edit-button"])
{
    grid-column: 1;
    grid-row: 1;

    justify-self: flex-end;
    align-self: flex-start;
    z-index: 2;

    opacity: 0;
    transition: opacity 200ms ease;
}

:host(:not([edit],[editable])) #edit-button
,:host(:not([edit],[editable])) ::slotted([slot="edit-button"])
{
    display: none;
    pointer-events: none;
}

.icon
,::slotted([slot="icon"])
{
    grid-column: 1;
    grid-row: 1;

    justify-self: center;
    align-self: center;

    width: var(--icon-width, var(--icon-size));
    margin: .25em;
}
#image-icon
,::slotted(img[slot="icon"])
{
    display: block;
    max-width: 100%;
    min-width: 0;
    max-height: 100%;
    min-height: 0;
}
#text-icon
{
    font-size: 36px;
    line-height: 1;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:host(:not([src])) #image-icon
,:host([src]) #text-icon
{
    display: none;
}

#caption
,::slotted([slot="caption"])
{
    text-align: center;
    text-overflow: ellipsis;
    overflow: hidden;
}

:host(:not([select],[selectable]):hover)  #edit-button
,:host(:not([select],[selectable]):hover) ::slotted([slot="edit-button"])
,:host(:focus)  #edit-button
,:host(:focus) ::slotted([slot="edit-button"])
,figure:has(:checked) #edit-button
,figure:has(:checked) ::slotted([slot="edit-button"])
,figure:has(:focus) #edit-button
,figure:has(:focus) ::slotted([slot="edit-button"])
,figure:has(:focus-within) #edit-button
,figure:has(:focus-within) ::slotted([slot="edit-button"])
{ 
    opacity: 1;
}


:host(:hover) #selected
,figure:has(:checked) #selected
,figure:focus #selected
,figure:focus-within #selected
{ 
    opacity: 1;
}`;var c=`<figure id="figure">
    <slot name="selected"><input type="checkbox" id="selected" /></slot>
    <slot name="edit-button"><button type="button" id="edit-button">&#9998;</button></slot>
    <slot name="icon">
        <span id="text-icon" class="icon">\u{1F5CE}</span>
        <img id="image-icon" class="icon" />
    </slot>
    <slot name="caption"><figcaption id="caption"><slot>Item</slot></figcaption></slot>
</figure>`;var g=["Space","Enter"],r=new CSSStyleSheet;r.replaceSync(d);var a="captioned-thumbnail",l=class h extends HTMLElement{componentParts=new Map;getElement(t){if(this.componentParts.get(t)==null){let e=this.findElement(t);e!=null&&this.componentParts.set(t,e)}return this.componentParts.get(t)}findElement(t){return this.shadowRoot.getElementById(t)}static selectedClassName="selected";get isSelected(){return this.hasAttribute("aria-selected")}set isSelected(t){t==!0?this.#e():this.#s()}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=c,this.shadowRoot.adoptedStyleSheets.push(r),this.#i(),this.#t(),this.addEventListener("click",this.#n.bind(this)),this.addEventListener("keydown",this.#l.bind(this)),this.shadowRoot.querySelector("slot:not([name])").addEventListener("slotchange",this.#o.bind(this));let t=this.findElement("selected");t?.addEventListener("input",this.#d.bind(this))}#i(){let t=[...this.shadowRoot.querySelectorAll("[id]")];for(let s=0;s<t.length;s++)t[s].part.add(t[s].id);let e=[...this.shadowRoot.querySelectorAll("[class]")];for(let s=0;s<e.length;s++)e[s].part.add(...e[s].classList)}#o(t){this.#t()}#n(t){let e=t.composedPath().find(n=>n instanceof HTMLElement&&(n.id=="edit-button"||n.getAttribute("slot")=="edit-button"));if(e!=null){this.dispatchEvent(new CustomEvent("edit",{detail:{button:e,item:this},bubbles:!0,composed:!0})),t.stopPropagation();return}if(this.getAttribute("select")??this.getAttribute("selectable")==null)return;let o=t.composedPath().find(n=>n instanceof HTMLInputElement&&(n.id=="selected"||n.getAttribute("slot")=="selected"))==null?"click":"input",i=t;this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,cancelable:!0,detail:{shiftKey:i.shiftKey,ctrlKey:i.ctrlKey,method:o}}))!=!1&&this.toggleSelection()}#l(t){if(this.shadowRoot.activeElement==this.findElement("figure")&&g.indexOf(t.code)!=-1){if(t.preventDefault(),this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,cancelable:!0,detail:{method:t.code}}))==!1)return;this.toggleSelection()}}#d(t){t.preventDefault(),t.stopPropagation(),this.isSelected=t.target.checked}#t(){let t="";for(let e=0;e<this.childNodes.length;e++){let s=this.childNodes[e];if(s.nodeType==Node.TEXT_NODE){let o=s.textContent?.trim()??"";o!=""&&(t+=o)}}t.trim()==""&&(t=this.findElement("caption").textContent),this.title=t}#e(){(this.getAttribute("select")??this.getAttribute("selectable")==null)||this.setAttribute("aria-selected","option")}#s(){this.removeAttribute("aria-selected")}toggleSelection(){this.isSelected==!0?this.#s():this.#e()}#c(){let t=this.isSelected,e=this.findElement("selected");e!=null&&(e.checked=this.isSelected),this.classList.toggle(h.selectedClassName,t)}updateImage(t){let e=this.findElement("image-icon");e.src=t}static observedAttributes=["label","src","select","selectable","aria-selected"];attributeChangedCallback(t,e,s){if(t=="label"){let o=Array.from(this.childNodes).filter(i=>i.nodeType==Node.TEXT_NODE);for(let i=0;i<o.length;i++)o[i].remove();this.append(s),this.#t()}else t=="src"?this.updateImage(s):t=="select"||t=="selectable"?this.findElement("figure").tabIndex=0:t=="aria-selected"&&this.#c()}};customElements.get(a)==null&&customElements.define(a,l);export{l as CaptionedThumbnailElement};
